/// <reference lib="webworker" />
import { clientsClaim } from "workbox-core";
import { precacheAndRoute } from "workbox-precaching";

declare let self: ServiceWorkerGlobalScope;

// Precache all assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Take control of all pages as soon as the service worker is activated
void self.skipWaiting();
clientsClaim();

// Handle push events
self.addEventListener("push", (event: PushEvent) => {
  if (!event.data) {
    console.log("Push event but no data");
    return;
  }

  try {
    const payload = event.data.json();
    const { title, body, icon, badge, data } = payload;

    const options: NotificationOptions = {
      body,
      icon: icon || "/pwa-192x192.png",
      badge: badge || "/pwa-144x144.png",
      tag: data?.tag || "default",
      requireInteraction: data?.requireInteraction || false,
      data,
    };

    // Add actions if provided (TypeScript doesn't include this in NotificationOptions)
    if (data?.actions) {
      const optionsWithActions = options as NotificationOptions & {
        actions?: Array<{ action: string; title: string; icon?: string }>;
      };
      optionsWithActions.actions = data.actions;
    }

    event.waitUntil(self.registration.showNotification(title, options));
  } catch (error) {
    console.error("Error parsing push data:", error);
  }
});

// Handle notification clicks
self.addEventListener("notificationclick", (event: NotificationEvent) => {
  event.notification.close();

  const data = event.notification.data || {};
  const url = data.url || "/";

  // Handle action button clicks
  if (event.action) {
    switch (event.action) {
      case "view":
        // Open the session details page
        break;
      case "dismiss":
        // Just close the notification
        return;
    }
  }

  // Open or focus the app
  event.waitUntil(
    self.clients.matchAll({ type: "window" }).then(clientList => {
      // Check if there's already a window/tab open
      for (const client of clientList) {
        if (client.url === url && "focus" in client) {
          return client.focus();
        }
      }
      // If no window/tab is open, open a new one
      if (self.clients.openWindow) {
        return self.clients.openWindow(url);
      }
    }),
  );
});

// Handle notification close
self.addEventListener("notificationclose", (event: NotificationEvent) => {
  const data = event.notification.data || {};

  // Track notification dismissal if needed
  console.log("Notification closed:", data);
});
